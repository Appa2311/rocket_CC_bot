import base64
exec(base64.b64decode("from telebot import TeleBot
from cred import *
import os
import json
import time

# 📂 Function to load free users
def load_free_users():
    if os.path.exists(FREE_USERS_FILE) and os.path.getsize(FREE_USERS_FILE) > 0:
        with open(FREE_USERS_FILE, "r") as file:
            try:
                return json.load(file)
            except json.JSONDecodeError:
                return {}  # Return empty dictionary if JSON is corrupted
    return {}  # Return empty dictionary if file doesn't exist

# 📂 Function to save free users
def save_free_users(users):
    with open(FREE_USERS_FILE, "w") as file:
        json.dump(users, file, indent=4)

# 🎛 Main tools function for the bot
def tools(bot: TeleBot):
    
    @bot.message_handler(commands=['gen'])
    def gates(message):
        free_users = load_free_users()  # Always load latest users
        if str(message.from_user.id) not in free_users:
            bot.reply_to(message, "Hey, you are not registered. Please register using /register ✅")
            return
        
        start_time = time.perf_counter()
        chat_id = message.from_user.id
        args = message.text.split()[1:]
        if len(args) != 1:
            bot.reply_to(message, """❌ Invalid Format! Use:
    <code>/gen 447697|12|25|123</code> or <code>/gen 123456</code>""", parse_mode="HTML")
        else:
            if not op(message.from_user.id):
                bot.reply_to(message, "You don't have enough credit.")
            else:
                bin_input = args[0]
                data = get_bin(bin_input) or {}
                
                bank = data.get("bank", "N/A")
                country = data.get("country", "N/A")
                scheme = data.get("scheme", "N/A")
                level = data.get("level", "N/A")
                type_ = data.get("type", "N/A")

                generated_cards = gen(bin_input)
                end_time = time.perf_counter()
                execution_time = end_time - start_time

                bot.reply_to(message, f"""✅ 𝐂𝐂 𝐆𝐞𝐧𝐞𝐫𝐚𝐭𝐞𝐝 𝐒𝐮𝐜𝐜𝐞𝐬𝐬𝐟𝐮𝐥𝐥𝐲  
            
🔢 𝐁𝐢𝐧: {bin_input}  
🔢 𝐀𝐦𝐨𝐮𝐧𝐭: 10  
            
{generated_cards}
            
ℹ️ {scheme} - {level}  
🏛 𝐁𝐚𝐧𝐤: {bank}  
🇺🇸 𝐂𝐨𝐮𝐧𝐭𝐫𝐲: {country}  
            
⏳ 𝐓𝐢𝐦𝐞: {execution_time:.2f} seconds
            
👤 Checked by @{message.from_user.username} 🚀""", parse_mode="HTML")

    @bot.message_handler(commands=['register'])
    def register(message):
        free_users = load_free_users()  # Always load latest users
        chat_id = str(message.from_user.id)

        if chat_id in free_users:
            bot.reply_to(message, f"User {chat_id} already exists with {free_users[chat_id]['credits']} credits.")
        else:
            free_users[chat_id] = {"credits": 50}
            save_free_users(free_users)
            bot.reply_to(message, f"Registration completed.✅\n\nUser {chat_id} added with 50 free credits.")

    @bot.message_handler(commands=['credit', 'credits'])
    def credit(message):
        free_users = load_free_users()  # Always load latest users
        chat_id = str(message.from_user.id)

        if chat_id not in free_users:
            bot.reply_to(message, "Hey, you are not registered. Please register using /register ✅")
            return
        
        bot.reply_to(message, f"💰 You have {free_users[chat_id]['credits']} credits ✅")

    @bot.message_handler(commands=['info'])
    def user_info_command(message):
        free_users = load_free_users()  # Always load latest users
        if str(message.from_user.id) not in free_users:
            bot.reply_to(message, "Hey, you are not registered. Please register using /register ✅")
            return
        user_info(bot, message)

    @bot.message_handler(commands=['bin'])
    def bin_info_command(message):
        free_users = load_free_users()  # Always load latest users
        if str(message.from_user.id) not in free_users:
            bot.reply_to(message, "Hey, you are not registered. Please register using /register ✅")
            return
        get_bin_info(bot, message)

    @bot.message_handler(commands=['sk'])
    def check_sk(message):
        free_users = load_free_users()  # Always load latest users
        chat_id = message.from_user.id
        args = message.text.split(" ", 1)

        if len(args) < 2 or not args[1].startswith("sk_live_"):
            bot.reply_to(message, "❌ **Usage:** `/sk sk_live_xxx`\nPlease provide a valid Stripe Secret Key.", parse_mode="Markdown")
            return

        if str(chat_id) not in free_users:
            bot.reply_to(message, "Hey, you are not registered. Please register using /register ✅")
            return
        
        sk_key = args[1].strip()
        if not op(chat_id):
            bot.reply_to(message, "You don't have enough credit.")
        else:
            result = sk(sk_key)
            bot.reply_to(message, result, parse_mode="HTML")

    @bot.message_handler(commands=['gates', 'gate'])
    def gate_info(message):
        free_users = load_free_users()  # Always load latest users
        if str(message.from_user.id) not in free_users:
            bot.reply_to(message, "Hey, you are not registered. Please register using /register ✅")
            return
        
        bot.reply_to(message, """💳 Payment Checkers (Gates)
    
/gate - 🔑 List all available gates
/chk <cc|mm|yy|cvv> - ✅ Check Stripe card validity
/b - 🔐 Braintree (Premium)""")

    @bot.message_handler(commands=['tools', 'tool'])
    def tools_info(message):
        free_users = load_free_users()  # Always load latest users
        if str(message.from_user.id) not in free_users:
            bot.reply_to(message, "Hey, you are not registered. Please register using /register ✅")
            return
        
        bot.reply_to(message, """🔧 Useful Tools
    
/bin bin_number - 🏦 Get BIN information
/gen bin - 🔄 Generate credit cards from BIN
/info - ℹ️ Get user information
/fake - 🃏 Generate fake user details
/countrycode - 🌍 Get country codes
/sk sk_live_xxx - 🔍 Validate a Stripe Secret Key""", parse_mode="HTML")").decode())