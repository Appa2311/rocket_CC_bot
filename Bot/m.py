import base64
exec(base64.b64decode("aW1wb3J0IHJhbmRvbQppbXBvcnQgb3MKaW1wb3J0IHRpbWUKaW1wb3J0IHRlbGVib3QKCmJvdCA9IHRlbGVib3QuVGVsZUJvdCgiNzg3MTEzMTkwNzpBQUdSYWdRczN4SHlsa2J6NUZMTG9HWmNlMUFmbzZGbUdnMCIpCgpkZWYgbHVobl9jYXJkX2dlbmVyYXRvcihiaW5faW5wdXQsIG1vbnRoPU5vbmUsIHllYXI9Tm9uZSwgY3Z2PU5vbmUsIGFtb3VudD0xMCk6CiAgICBnZW5lcmF0ZWRfY2FyZHMgPSBzZXQoKQogICAgYmluX3RlbXBsYXRlID0gJycuam9pbihjIGlmIGMuaXNkaWdpdCgpIG9yIGMgPT0gJ3gnIGVsc2UgJycgZm9yIGMgaW4gYmluX2lucHV0KS5yZXBsYWNlKCd4JywgJyMnKQoKICAgIGlmICcjJyBub3QgaW4gYmluX3RlbXBsYXRlOgogICAgICAgIGJpbl90ZW1wbGF0ZSArPSAnIycgKiAoMTYgLSBsZW4oYmluX3RlbXBsYXRlKSkKCiAgICBpZiBiaW5fdGVtcGxhdGUuc3RhcnRzd2l0aCgnNCcpOgogICAgICAgIGNhcmRfdHlwZSA9ICdWSVNBJwogICAgZWxpZiBiaW5fdGVtcGxhdGUuc3RhcnRzd2l0aCgoJzUxJywgJzUyJywgJzUzJywgJzU0JywgJzU1JykpOgogICAgICAgIGNhcmRfdHlwZSA9ICdNQVNURVJDQVJEJwogICAgZWxpZiBiaW5fdGVtcGxhdGUuc3RhcnRzd2l0aCgoJzM0JywgJzM3JykpOgogICAgICAgIGNhcmRfdHlwZSA9ICdBTUVYJwogICAgZWxpZiBiaW5fdGVtcGxhdGUuc3RhcnRzd2l0aCgnNicpOgogICAgICAgIGNhcmRfdHlwZSA9ICdESVNDT1ZFUicKICAgIGVsc2U6CiAgICAgICAgY2FyZF90eXBlID0gJ1VOS05PV04nCgogICAgd2hpbGUgbGVuKGdlbmVyYXRlZF9jYXJkcykgPCBhbW91bnQ6CiAgICAgICAgY2FyZF9udW1iZXIgPSBsaXN0KGJpbl90ZW1wbGF0ZSkKICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oY2FyZF9udW1iZXIpKToKICAgICAgICAgICAgaWYgY2FyZF9udW1iZXJbaV0gPT0gJyMnOgogICAgICAgICAgICAgICAgY2FyZF9udW1iZXJbaV0gPSBzdHIocmFuZG9tLnJhbmRpbnQoMCwgOSkpCgogICAgICAgIGNhcmRfbnVtYmVyID0gJycuam9pbihjYXJkX251bWJlcikKCiAgICAgICAgbHVobl9zdW0gPSAwCiAgICAgICAgcmV2ZXJzZV9kaWdpdHMgPSBbaW50KGQpIGZvciBkIGluIGNhcmRfbnVtYmVyWzotMV1dWzo6LTFdCgogICAgICAgIGZvciBpLCBkaWdpdCBpbiBlbnVtZXJhdGUocmV2ZXJzZV9kaWdpdHMpOgogICAgICAgICAgICBpZiBpICUgMiA9PSAwOgogICAgICAgICAgICAgICAgZGlnaXQgKj0gMgogICAgICAgICAgICAgICAgaWYgZGlnaXQgPiA5OgogICAgICAgICAgICAgICAgICAgIGRpZ2l0IC09IDkKICAgICAgICAgICAgbHVobl9zdW0gKz0gZGlnaXQKCiAgICAgICAgY2hlY2tfZGlnaXQgPSAoMTAgLSAobHVobl9zdW0gJSAxMCkpICUgMTAKICAgICAgICBmdWxsX2NhcmRfbnVtYmVyID0gY2FyZF9udW1iZXJbOi0xXSArIHN0cihjaGVja19kaWdpdCkKCiAgICAgICAgaWYgZnVsbF9jYXJkX251bWJlciBub3QgaW4gZ2VuZXJhdGVkX2NhcmRzOgogICAgICAgICAgICBnZW5lcmF0ZWRfY2FyZHMuYWRkKGZ1bGxfY2FyZF9udW1iZXIpCgogICAgZ2VuZXJhdGVkX3Jlc3VsdHMgPSBbXQogICAgZm9yIGNhcmQgaW4gZ2VuZXJhdGVkX2NhcmRzOgogICAgICAgIGV4cF9tb250aCA9IG1vbnRoIGlmIG1vbnRoIGVsc2Ugc3RyKHJhbmRvbS5yYW5kaW50KDEsIDEyKSkuemZpbGwoMikKICAgICAgICBleHBfeWVhciA9IHllYXIgaWYgeWVhciBlbHNlIHN0cihyYW5kb20ucmFuZGludCgyNCwgMzApKQogICAgICAgIGN2dl9jb2RlID0gKAogICAgICAgICAgICBjdnYgaWYgY3Z2CiAgICAgICAgICAgIGVsc2Ugc3RyKHJhbmRvbS5yYW5kaW50KDEwMCwgOTk5KSkuemZpbGwoMykgaWYgY2FyZF90eXBlICE9ICdBTUVYJwogICAgICAgICAgICBlbHNlIHN0cihyYW5kb20ucmFuZGludCgxMDAwLCA5OTk5KSkuemZpbGwoNCkKICAgICAgICApCiAgICAgICAgZ2VuZXJhdGVkX3Jlc3VsdHMuYXBwZW5kKGYie2NhcmR9fHtleHBfbW9udGh9fHtleHBfeWVhcn18e2N2dl9jb2RlfSIpCgogICAgcmV0dXJuICdcbicuam9pbihnZW5lcmF0ZWRfcmVzdWx0cykKCmRlZiBnZW5lcmF0ZV9jb2RlX2Jsb2NrcyhhbGxfY2FyZHMpOgogICAgY29kZV9ibG9ja3MgPSAiIgogICAgY2FyZHMgPSBhbGxfY2FyZHMuc3BsaXQoJ1xuJykKICAgIGZvciBjYXJkIGluIGNhcmRzOgogICAgICAgIGNvZGVfYmxvY2tzICs9IGYiPGNvZGU+e2NhcmR9PC9jb2RlPlxuIgogICAgcmV0dXJuIGNvZGVfYmxvY2tzCgpAYm90Lm1lc3NhZ2VfaGFuZGxlcihjb21tYW5kcz1bJ2dlbiddKQpkZWYgZ2VuX2NtZChtZXNzYWdlKToKICAgIHVzZXJfaWQgPSBzdHIobWVzc2FnZS5mcm9tX3VzZXIuaWQpCiAgICBhbGxvd2VkX3VzZXJzID0gbG9hZF9hbGxvd2VkX3VzZXJzKCkKCiAgICBpZiB1c2VyX2lkIG5vdCBpbiBhbGxvd2VkX3VzZXJzOgogICAgICAgIGJvdC5zZW5kX21lc3NhZ2UobWVzc2FnZS5jaGF0LmlkLCAi8J+aqyBZb3UgZG8gbm90IGhhdmUgYWNjZXNzIHRvIHRoaXMgYm90LiIpCiAgICAgICAgcmV0dXJuCgogICAgaWYgbm90IGlzX3VzZXJfc3Vic2NyaWJlZCh1c2VyX2lkKToKICAgICAgICBib3Quc2VuZF9tZXNzYWdlKG1lc3NhZ2UuY2hhdC5pZCwgIvCfmqsgWW91ciBzdWJzY3JpcHRpb24gaGFzIGV4cGlyZWQgb3IgeW91IGRvbid0IGhhdmUgYW4gYWN0aXZlIHBsYW4uIFVzZSAvcmVkZWVtIHRvIGFjdGl2YXRlIGEgcGxhbi4iKQogICAgICAgIHJldHVybgoKICAgIHRyeToKICAgICAgICBjY3NkYXRhID0gbWVzc2FnZS50ZXh0LnNwbGl0KClbMV0KICAgICAgICBjY19wYXJ0cyA9IGNjc2RhdGEuc3BsaXQoInwiKQogICAgICAgIGNjID0gY2NfcGFydHNbMF0ucmVwbGFjZSgnXHUyMDBlJywgJycpCiAgICAgICAgbWVzID0gY2NfcGFydHNbMV0gaWYgbGVuKGNjX3BhcnRzKSA+IDEgZWxzZSBOb25lCiAgICAgICAgYW5vID0gY2NfcGFydHNbMl0gaWYgbGVuKGNjX3BhcnRzKSA+IDIgZWxzZSBOb25lCiAgICAgICAgY3Z2ID0gY2NfcGFydHNbM10gaWYgbGVuKGNjX3BhcnRzKSA+IDMgZWxzZSBOb25lCiAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICBib3QucmVwbHlfdG8obWVzc2FnZSwgIuKdjCBJbnZhbGlkIEZvcm1hdCEgVXNlOlxuYC9nZW4gNDQ3Njk3fDEyfDI1fDEyM2AiLCBwYXJzZV9tb2RlPSJNYXJrZG93biIpCiAgICAgICAgcmV0dXJuCgogICAgYW1vdW50ID0gMTAKICAgIHRyeToKICAgICAgICBhbW91bnQgPSBpbnQobWVzc2FnZS50ZXh0LnNwbGl0KClbMl0pCiAgICBleGNlcHQgKEluZGV4RXJyb3IsIFZhbHVlRXJyb3IpOgogICAgICAgIHBhc3MKCiAgICBkZWxldGVfbXNnID0gYm90LnJlcGx5X3RvKG1lc3NhZ2UsICI8Yj5HZW5lcmF0aW5nLi4uPC9iPiIsIHBhcnNlX21vZGU9IkhUTUwiKQogICAgc3RhcnQgPSB0aW1lLnBlcmZfY291bnRlcigpCiAgICAKICAgIGdldGJpbiA9IGdldF9iaW5fZGV0YWlscyhjY1s6Nl0pCiAgICBicmFuZCwgdHlwZV8sIGxldmVsLCBiYW5rLCBjb3VudHJ5LCBmbGFnLCBjdXJyZW5jeSA9IGdldGJpbgoKICAgIGlmIGFtb3VudCA+IDEwMDAwOgogICAgICAgIGJvdC5yZXBseV90byhtZXNzYWdlLCAiPGI+4pqg77iPIE1heGltdW0gQWxsb3dlZDogMTBLPC9iPiIsIHBhcnNlX21vZGU9IkhUTUwiKQogICAgICAgIHJldHVybgoKICAgIGFsbF9jYXJkcyA9IGx1aG5fY2FyZF9nZW5lcmF0b3IoY2MsIG1lcywgYW5vLCBjdnYsIGFtb3VudCkKCiAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoImRvd25sb2FkcyIpOgogICAgICAgIG9zLm1ha2VkaXJzKCJkb3dubG9hZHMiKQoKICAgIGZpbGVuYW1lID0gZiJkb3dubG9hZHMve2Ftb3VudH14X0NDX0dlbmVyYXRlZF9CeV97dXNlcl9pZH0udHh0IgoKICAgIGlmIGFtb3VudCA9PSAxMDoKICAgICAgICByZXNwb25zZV90ZXh0ID0gKAogICAgICAgICAgICBmIi0g4pyFIPCdkILwnZCCIPCdkIbwnZCe8J2Qp/CdkJ7wnZCr8J2QmvCdkK3wnZCe8J2QnSDwnZCS8J2QrvCdkJzwnZCc8J2QnvCdkKzwnZCs8J2Qn/CdkK7wnZCl8J2QpfCdkLJcbiIKICAgICAgICAgICAgZiItIPCflKIg8J2QgfCdkKLwnZCnOiA8Y29kZT57Y2N9PC9jb2RlPlxuIgogICAgICAgICAgICBmIi0g8J+UoiDwnZCA8J2QpvCdkKjwnZCu8J2Qp/CdkK06IHthbW91bnR9XG5cbiIKICAgICAgICAgICAgZiJ7Z2VuZXJhdGVfY29kZV9ibG9ja3MoYWxsX2NhcmRzKX1cbiIKICAgICAgICAgICAgZiItIOKEue+4jyB7YnJhbmR9IC0ge3R5cGVffSAtIHtsZXZlbH1cbiIKICAgICAgICAgICAgZiItIPCfj5sg8J2QgfCdkJrwnZCn8J2QpDoge2Jhbmt9XG4iCiAgICAgICAgICAgIGYiLSDwn4e68J+HuCDwnZCC8J2QqPCdkK7wnZCn8J2QrfCdkKvwnZCyOiB7Y291bnRyeX0ge2ZsYWd9XG5cbiIKICAgICAgICAgICAgZiItIOKPsyDwnZCT8J2QovCdkKbwnZCeOiB7dGltZS5wZXJmX2NvdW50ZXIoKSAtIHN0YXJ0Oi4yZn1zXG4iCiAgICAgICAgICAgIGYiLSDwn5GkIENoZWNrZWQgYnkgPGEgaHJlZj0ndGc6Ly91c2VyP2lkPXttZXNzYWdlLmZyb21fdXNlci5pZH0nPnttZXNzYWdlLmZyb21fdXNlci5maXJzdF9uYW1lfTwvYT4iCiAgICAgICAgKQogICAgICAgIGJvdC5kZWxldGVfbWVzc2FnZShtZXNzYWdlLmNoYXQuaWQsIGRlbGV0ZV9tc2cubWVzc2FnZV9pZCkKICAgICAgICBib3QucmVwbHlfdG8obWVzc2FnZSwgcmVzcG9uc2VfdGV4dCwgcGFyc2VfbW9kZT0iSFRNTCIpCiAgICBlbHNlOgogICAgICAgIHdpdGggb3BlbihmaWxlbmFtZSwgInciKSBhcyBmOgogICAgICAgICAgICBmLndyaXRlKGFsbF9jYXJkcykKCiAgICAgICAgY2FwdGlvbiA9IGYiIiIKLSDwn5SiIPCdkIHwnZCi8J2QpzogPGNvZGU+e2NjfTwvY29kZT4KLSDwn5SiIPCdkIDwnZCm8J2QqPCdkK7wnZCn8J2QrToge2Ftb3VudH0KCi0g4oS577iPIHticmFuZH0gLSB7dHlwZV99IC0ge2xldmVsfQotIPCfj5sg8J2QgfCdkJrwnZCn8J2QpDoge2Jhbmt9Ci0g8J+HuvCfh7gg8J2QgvCdkKjwnZCu8J2Qp/CdkK3wnZCr8J2Qsjoge2NvdW50cnl9IHtmbGFnfSB7Y3VycmVuY3l9CgotIOKPsyDwnZCT8J2QovCdkKbwnZCeOiB7dGltZS5wZXJmX2NvdW50ZXIoKSAtIHN0YXJ0Oi4yZn1zCi0g8J+RpCBDaGVja2VkIGJ5IDxhIGhyZWY9InRnOi8vdXNlcj9pZD17bWVzc2FnZS5mcm9tX3VzZXIuaWR9Ij57bWVzc2FnZS5mcm9tX3VzZXIuZmlyc3RfbmFtZX08L2E+IOKkvyBQcmVtaXVtIOKkvgoiIiIKICAgICAgICBib3QuZGVsZXRlX21lc3NhZ2UobWVzc2FnZS5jaGF0LmlkLCBkZWxldGVfbXNnLm1lc3NhZ2VfaWQpCiAgICAgICAgd2l0aCBvcGVuKGZpbGVuYW1lLCAicmIiKSBhcyBkb2NfZmlsZToKICAgICAgICAgICAgYm90LnNlbmRfZG9jdW1lbnQoCiAgICAgICAgICAgICAgICBtZXNzYWdlLmNoYXQuaWQsCiAgICAgICAgICAgICAgICBkb2NfZmlsZSwKICAgICAgICAgICAgICAgIGNhcHRpb249Y2FwdGlvbiwKICAgICAgICAgICAgICAgIHBhcnNlX21vZGU9IkhUTUwiLAogICAgICAgICAgICAgICAgcmVwbHlfdG9fbWVzc2FnZV9pZD1tZXNzYWdlLm1lc3NhZ2VfaWQKICAgICAgICAgICAgKQogICAgICAgIG9zLnJlbW92ZShmaWxlbmFtZSkKCmJvdC5wb2xsaW5nKCk=").decode())